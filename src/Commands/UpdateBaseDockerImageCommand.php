<?php

declare(strict_types=1);

namespace AirSlate\Releaser\Commands;

use AirSlate\Releaser\Builder;
use AirSlate\Releaser\Exceptions\NothingToCommitException;
use AirSlate\Releaser\Processors\FileProcessor;
use Fluffy\GithubClient\Client as GithubClient;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

class UpdateBaseDockerImageCommand extends Command
{
    /** @var array */
    private $config;

    /**
     * @return void
     */
    protected function configure(): void
    {
        $this
            ->setName('docker:update-base')
            ->setDescription('Update base Docker image');
    }

    /**
     * @param InputInterface $input
     * @param OutputInterface $output
     * @return void
     * @throws \ReflectionException
     */
    protected function execute(InputInterface $input, OutputInterface $output): void
    {
        $output->writeln('<info>Docker base image updating.</info>');
        $this->config = require_once './config/addons.php';
        $client = new GithubClient([
            'owner' => getenv('OWNER'),
            'token' => getenv('GITHUB_OAUTH_TOKEN'),
        ]);

        $addons = $this->config['addons'] ?? [];
        foreach ($addons as $addon) {
            try {
                (new Builder($client, $addon))
                    ->forTask('AAD-897')
                    ->from('develop')
                    ->step(function (FileProcessor $dockerfile) {
                        return $dockerfile
                            ->take('Dockerfile')
                            ->regexReplace(
                                '/(pdffiller\/php72-ubuntu16:v)\d+\.\d+\.\d+/',
                                '${1}1.3.0'
                            );
                    })
                    ->branch('update-docker-image')
                    ->commit('Update base docker image')
                    ->push()
                    ->makePR('Update base docker image', 'Autogenerated PR');
            } catch (NothingToCommitException $exception) {
                var_dump($addon . ' skipped');
            }
        }
    }
}