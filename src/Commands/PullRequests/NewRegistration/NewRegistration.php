<?php

declare(strict_types=1);

namespace AirSlate\Releaser\Commands\PullRequests\NewRegistration;

use AirSlate\Releaser\Builder;
use AirSlate\Releaser\Commands\AddonsCommand;
use AirSlate\Releaser\DTO\WorkingFile;
use AirSlate\Releaser\Processors\AddonSchemeProcessor;
use AirSlate\Releaser\Processors\FileProcessor;
use Illuminate\Support\Arr;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

class NewRegistration extends AddonsCommand
{
    /**
     * @return void
     */
    protected function configure(): void
    {
        $this
            ->setName('pr:registration')
            ->setDescription('Enable new registration');
    }

    /**
     * @param InputInterface $input
     * @param OutputInterface $output
     */
    protected function beforeCommand(InputInterface $input, OutputInterface $output)
    {
        $output->writeln('<info>Enable new registration in addons.</info>');
    }

    /**
     * @param string $addon
     * @param InputInterface $input
     * @param OutputInterface $output
     * @throws \ReflectionException
     */
    protected function step(string $addon, InputInterface $input, OutputInterface $output)
    {
        (new Builder($this->client, $addon))
            ->setOutput($output)
            ->from('develop')
            ->step(function (AddonSchemeProcessor $scheme) use ($output) {
                return $scheme
                    ->takeAll()
                    ->map(function (array $content) use ($scheme, $output) {
                        $eventGroups = $content['data']['attributes']['event_groups'] ?? [];
                        if (empty($eventGroups)) {
                            return false;
                        }

                        for ($i = 0; $i < count($eventGroups); $i++) {
                            $layoutsSchema = $eventGroups[$i]['layouts_schema'] ?? [];
                            if (empty($layoutsSchema)) {
                                Arr::set($content, "data.attributes.event_groups.{$i}.layouts_schema", []);
                            }
                        }

                        return $content;
                    });
            })
            ->branch('test')
            ->commit('Add layouts_schema')
            ->push()
            ->makePR('Add layouts_schema', 'Autogenerated PR');
    }

    private function getConnection(string $localePrefix)
    {
        $connection = [
            [
                'type' => 'connection',
                'name' => 'connection_settings',
                'title' => 'Connection settings',
                'hint' => [
                    'title' => $localePrefix . '_CONNECTION_BLOCK_HINT_TITLE',
                    'text' => $localePrefix . '_CONNECTION_BLOCK_HINT_TEXT',
                ],
                'items' => [],
            ],
            [
                'type' => 'actions',
                'name' => 'matching_mapping',
            ]
        ];
    }
}
