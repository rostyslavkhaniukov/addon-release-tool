<?php

declare(strict_types=1);

namespace AirSlate\Releaser\Commands\PullRequests\ReplaceTags;

use AirSlate\Releaser\Builder;
use AirSlate\Releaser\Commands\AddonsCommand;
use AirSlate\Releaser\Processors\AddonSchemeProcessor;
use AirSlate\Releaser\Processors\JsonProcessor;
use AirSlate\Releaser\Services\SchemesPathsFetcher;
use AirSlate\Releaser\Services\VersionUpdater\ChangelogVersionUpdater;
use AirSlate\Releaser\Services\VersionUpdater\SchemaVersionUpdater;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

class ReplaceTags extends AddonsCommand
{
    /**
     * @return void
     */
    protected function configure(): void
    {
        $this
            ->setName('pr:replace-tags')
            ->setDescription('Enable phpmd in addon');
    }

    /**
     * @param string $addon
     * @param InputInterface $input
     * @param OutputInterface $output
     * @throws \ReflectionException
     */
    protected function step(string $addon, InputInterface $input, OutputInterface $output): void
    {
        $schemesPathsFetcher = new SchemesPathsFetcher($this->client);
        $schemaVersionUpdater = new SchemaVersionUpdater();
        $changelogVersionUpdater = new ChangelogVersionUpdater();
        (new Builder($this->client, $addon))
            ->from('develop')
            ->forTask('AAD-1183')
            ->setOutput($output)
            ->step(function (AddonSchemeProcessor $jsonProcessor) use ($schemaVersionUpdater) {
                return $jsonProcessor->takeAll()->map(function (array $content) use ($schemaVersionUpdater) {
                    $processedSettingsSchema = array_map(
                        function (array $setting) {
                            if ($setting['type'] === 'tags' && isset($setting['default_value'])) {
                                $setting['default_value'] = array_map(function (string $tag) {
                                    return str_replace('_', ' ', $tag);
                                }, $setting['default_value']);
                            }
                            return $setting;
                        },
                        $content['data']['attributes']['event_groups'][0]['settings_schema']
                    );
                    $content['data']['attributes']['event_groups'][0]['settings_schema'] = $processedSettingsSchema;
                    $schemaVersionUpdater->setSource($content);
                    return $schemaVersionUpdater->incrementPatch()->getSource();
                });
            })
            ->step(function (JsonProcessor $jsonProcessor) use (
                $addon,
                $schemesPathsFetcher,
                $changelogVersionUpdater
            ) {
                $changelogs = $schemesPathsFetcher->fetch(
                    $this->client->getOwner(),
                    $addon,
                    'develop',
                    'changelog.json'
                );
                foreach ($changelogs as $changelog) {
                    $jsonProcessor->take($changelog);
                }
                $jsonProcessor->map(function (array $content) use ($changelogVersionUpdater) {
                    $changelogVersionUpdater->setSource($content);
                    return $changelogVersionUpdater->incrementPatch([], ['Tags format changed'])->getSource();
                });
                return $jsonProcessor;
            })
            ->branch('replace-tags-autogenerated')
            ->commit('Change the default tag value')
            ->push()
            ->makePR('Change the default    tags format', 'Autogenerated PR');
    }
}
