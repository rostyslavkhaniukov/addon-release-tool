<?php

declare(strict_types=1);

namespace AirSlate\Releaser\Commands\PullRequests\AddCircleCI;

use AirSlate\Releaser\Builder;
use AirSlate\Releaser\Exceptions\FileNotFoundInRepositoryException;
use AirSlate\Releaser\Processors\FileProcessor;
use AirSlate\Releaser\Processors\YamlProcessor;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Fluffy\GithubClient\Client as GithubClient;

class AddCircleCICommand extends Command
{
    /**
     * @return void
     */
    protected function configure(): void
    {
        $this
            ->setName('pr:circleci')
            ->setDescription('Add CircleCI to addon');
    }

    /**
     * @param InputInterface $input
     * @param OutputInterface $output
     * @return void
     */
    protected function execute(InputInterface $input, OutputInterface $output): void
    {
        $output->writeln('<info>Adding CircleCI to addons.</info>');
        $client = new GithubClient([
            'owner' => getenv('OWNER'),
            'token' => getenv('GITHUB_OAUTH_TOKEN'),
        ]);

        $this->config = require_once './config/addons.php';
        $addons = $this->config['addons'] ?? [];

        foreach ($addons as $addon) {
            try {
                (new Builder($client, $addon))
                    ->setOutput($output)
                    ->verify(function (YamlProcessor $yaml) use ($output, $addon) {
                        try {
                            return $yaml
                                ->take('.circleci/config.yml')
                                ->withCallback(function (array $content) {
                                    return count($content['jobs']) === 1;
                                });
                        } catch (FileNotFoundInRepositoryException $e) {
                            return true;
                        }
                    })
                    ->forTask('ARCH-1240')
                    ->from('develop')
                    ->branch('add-build-docker-to-circleci-config')
                    ->step(function (FileProcessor $circleci) use ($output, $addon) {
                        try {
                            $result = $circleci
                                ->take('.circleci/config.yml')
                                ->setFromFile(__DIR__ . '/config.yml');

                            $output->writeln("<comment>Updating ${addon}...</comment>");
                            return $result;
                        } catch (FileNotFoundInRepositoryException $e) {
                            $output->writeln("<comment>File not exists in ${addon}. Creating...</comment>");
                            return $circleci->createFromFile(
                                '.circleci/config.yml',
                                __DIR__ . '/config.yml'
                            );
                        }
                    })
                    ->commit('Update CircleCI config')
                    ->push()
                    ->makePR('Update CircleCI config', 'Autogenerated PR');
            } catch (\Throwable $e) {
                var_dump($e->getMessage(), $e->getFile(), $e->getLine());
            }
        }
    }
}
