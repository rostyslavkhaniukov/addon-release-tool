<?php

declare(strict_types=1);

namespace AirSlate\Releaser\Commands\PullRequests\AddCoverageMetrics;

use AirSlate\Releaser\Builder;
use AirSlate\Releaser\Commands\AddonsCommand;
use AirSlate\Releaser\Processors\FileProcessor;
use AirSlate\Releaser\Processors\YamlProcessor;
use AirSlate\Releaser\Services\EnvCtmplPathsFetcher;
use Symfony\Component\Console\Helper\Table;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

class AddCoverageMetrics extends AddonsCommand
{
    /**
     * @return void
     */
    protected function configure(): void
    {
        $this
            ->setName('add:coverage')
            ->setDescription('Add coverage');
    }

    protected function beforeCommand(InputInterface $input, OutputInterface $output)
    {
        $output->writeln('<info>Add coverage</info>');
        $this->table = new Table($output);
    }

    /**
     * @param string $addon
     * @param InputInterface $input
     * @param OutputInterface $output
     * @throws \ReflectionException
     */
    protected function step(string $addon, InputInterface $input, OutputInterface $output)
    {
        $builder = (new Builder($this->client, $addon))
            ->setOutput($output)
            ->from('develop')
            ->forTask('AAD-1232');

        $new = "declare(strict_types=1);\n\n" .
            "use AirSlate\PrometheusExporter\Services\Collectors\CodeCoverageCollector;\n";
        $builder->step(function (FileProcessor $ctmpl) use ($output, $addon, $new) {
            return $ctmpl
                ->take('config/prometheus.php')
                ->replace(
                    "declare(strict_types=1);\n\n",
                    $new
                )
                ->replace(
                    "'collectors' => [",
                    "'collectors' => [\n        CodeCoverageCollector::class,"
                )
                ->replace(
                    "];",
                    "    'code_coverage_metric_file_path' => '/app/storage/code-coverage/summary',\n];"
                );
        });

        $builder->step(function (FileProcessor $circleci) {
            $a = <<< HERE
    - run:
          name: Create shared workspace for code coverage
          command: mkdir -p workspace
      - run:
          name: Run tests
          command: |
            if [[ -n \${CIRCLE_TAG} ]]
            then
              ./vendor/bin/phpunit --coverage-text=/tmp/coverage-report --colors=never
              ./vendor/airslate/laravel-prometheus-exporter/scripts/code-coverage-prepare-report.sh\
                /tmp/coverage-report ./workspace/coverage-report-summary
            else
              ./vendor/bin/phpunit --no-coverage
              printf "classes:0\\nlines:0\\nmethods:0" > ./workspace/coverage-report-summary
            fi
      - persist_to_workspace:
          root: workspace
          paths:
            - coverage-report-summary
HERE;
            $b = <<< DOC
    - run:
          name: PHPUnit
          command: ./vendor/bin/phpunit --no-coverage
DOC;

            $c = <<< HERE
      - setup_remote_docker:
          docker_layer_caching: true
HERE;
            $d = <<< DOC
      - setup_remote_docker:
          docker_layer_caching: true
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Save code covarage to file
          command: |
            mkdir -p ./storage/code-coverage
            cp /tmp/workspace/coverage-report-summary ./storage/code-coverage/summary
          when: always
DOC;

            return $circleci
                ->take('.circleci/config.yml')
                ->replace(
                    $b,
                    $a
                )
                ->replace($c, $d);
        });

        $builder
            ->branch('add-coverage-metrics-2')
            ->commit('Add coverage metrics')
            ->push()
            ->makePR('Add coverage metrics', 'Autogenerated PR');
    }
}
