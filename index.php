<?php
declare(strict_types=1);

require_once __DIR__ . '/vendor/autoload.php';

$dotenv = Dotenv\Dotenv::create(__DIR__);
$dotenv->load();

use AirSlate\Releaser\Builder;
use AirSlate\Releaser\CircleCIEnvPatcher;
use AirSlate\Releaser\Processors\ComposerProcessor;
use AirSlate\Releaser\Processors\DependencyUpdaterProcessor;
use AirSlate\Releaser\Processors\JsonProcessor;
use AirSlate\Releaser\Processors\NeonProcessor;
use Composer\Console\Application;
use Fluffy\GithubClient\Client;
use Fluffy\GithubClient\Client as GithubClient;
use GuzzleHttp\RequestOptions;
use SensioLabs\Consul\ServiceFactory;
use Symfony\Component\Console\Input\ArrayInput;

$addons = [
    'notification-addon',
    'prefill-from-source-addons',
    'audit-trail-addon',
    'change-order-addon',
    'document-prefill-addon',
    'dropdown-options-prefill-addon',
    'google-calendar-addon',
    'google-spreadsheets-duplex-addon',
    'google-spreadsheets-postfinish-addon',
    'google-spreadsheets-watcher-addon',
    'jira-addon',
    'lock-slate-bot',
    'export-to-source-addons',
    'packet-delete-addon',
    'recipient-to-role-addon',
    'revoke-access-addon',
    'roles-users-management-addon',
    'send-slate-addon',
    'set-packet-name-addon',
    'slack-notifier-addon',
    'slate-prefill-addon',
    'smartsheet-export-addon',
    'sms-notifier-addon',
    'tags-addon',
    'webhook-addon',
    'weekly-reminder-addon',
    'create-slate-addon',
    'create-slate-another-flow-addon'
];

$client = new GithubClient([
    'owner' => getenv('OWNER'),
    'token' => getenv('GITHUB_OAUTH_TOKEN'),
]);

foreach (['tags-addon'] as $addon) {
    try {
        (new Builder($client, 'airslateinc', $addon))
            ->forTask('composer')
            ->from('develop')
            ->branch('test')
            ->step(function (ComposerProcessor $dependency) {
                return $dependency
                    ->ensure('phpstan/phpstan', true);
            })
            ->commit('Update deps')
            ->push()
            ->makePR('Update deps', 'Autogenerated PR');
    } catch (\Throwable $e) {
        var_dump($e->getMessage(), $e->getFile(), $e->getLine());
    }
}

/*foreach ($addons as $addon) {
    try {
        (new Builder($client, 'airslateinc', $addon))
            ->verify(function (ComposerProcessor $dependencies) {
                return $dependencies
                    ->take('composer.lock')
                    ->checkLocked('pdffiller/mail-api-client');
            });

        echo $addon . "\n";
    } catch (\Throwable $e) {
        var_dump($e->getMessage());
    }
}*/

/*foreach ($addons as $addon) {
    try {
        (new Builder($client, 'airslateinc', $addon))
            ->verify(function (JsonProcessor $addonScheme) {
                return $addonScheme
                    ->take('docker/config/addon/pre-fill/addon.json')
                    ->isset('data.attributes.auto_install');
            })
            ->forTask('AAD-532')
            ->from('develop')
            ->branch('drop-auto-install-attribute')
            ->step(function (JsonProcessor $addonScheme) {
                return $addonScheme
                    ->take('docker/config/addon/pre-fill/addon.json')
                    ->unsetKey('data.attributes.auto_install');
            })
            ->commit('Drop auto_install attribute from scheme')
            ->push()
            ->makePR('Drop auto_install attribute from scheme', 'Autogenerated PR');
    } catch (Exception $e) {
        var_dump($e);
        echo "{$addon} Skipped\n";
    }
}*/
